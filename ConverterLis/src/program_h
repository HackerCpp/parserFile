#ifndef PROGRAM_H_
#define PROGRAM_H_

#include "common.h"

/********************************************************************
***  function for initializing/destroying work with main program ***
********************************************************************/

/* initializing function for obtaining paths to some directories (bin, calibration etc.) */
EXTERN void init_prog_dir_func( GetFunction get_func );

/* initializing program interface for current plug-in, if successful return NULL else return error string */
EXTERN int init_prog_func( GetFunction get_func );
/* freeing program interface for current plug-in */
EXTERN void destroy_prog_func();
/********************************************************************/

/* get pointer to main application window, type - "GTK", "HWND" and so on */
EXTERN void* prog_get_mainwindow_pointer( char8 *type );

/* get pointer to top application window, type - "GTK", "HWND" and so on */
EXTERN void* prog_get_top_window_pointer( char8 *type );

/* return unit scale by name from main program configuration file */
EXTERN float64 prog_rc_get_unit( gchar* name );

/********************************************************************/

/* put string preferences 'data' on path "path1:path2:path..." */
EXTERN void prog_put_pref6s( const char8 *path, const char8 *data );
/* put float64 preferences 'value' on path "path1:path2:path..." */
EXTERN void prog_put_pref6s_float64( const char8 *path, float64 value );
/* put int32 preferences 'value' on path "path1:path2:path..." */
EXTERN void prog_put_pref6s_int32( const char8 *path, int32 value );

/* get string preferences 'data' on path "path1:path2:path..." */
EXTERN const char8* prog_get_pref6s( const char8 *path );
/* get float64 preferences 'value' on path "path1:path2:path...", return TRUE if preference exists */
EXTERN bool32 prog_get_pref6s_float64( const char8 *path, float64 *value );
/* get int32 preferences 'value' on path "path1:path2:path...", return TRUE if preference exists */
EXTERN bool32 prog_get_pref6s_int32( const char8 *path, int32 *value );

/********************************************************************
***  functions showing messages  ***
********************************************************************/
typedef enum{
  PROG_MESSAGE_INFO,
  PROG_MESSAGE_WARNING,
  PROG_MESSAGE_QUESTION,
  PROG_MESSAGE_ERROR,
  PROG_MESSAGE_OTHER
} ProgMessageType;

/* show modal and non-modal message dialog, if 'message_caption' is NULL it's ignored */
void prog_show_message( ProgMessageType type, bool32 is_modal, const char8 *title,
		const char8 *message_caption, const char8 *message_text, ... ) G_GNUC_PRINTF(5, 6);

/* return TRUE if user pressed YES */
bool32 prog_show_yesno_message( const char8 *title, const char8 *message_text, ... ) G_GNUC_PRINTF(2, 3);

/********************************************************************/

/* some transform types for curves names */
#define FULL_LOCAL		"FULL"
#define SHORT_LOCAL		"SHORT"
#define SMALL_LOCAL		"SMALL"
#define LAS_FORM		"LAS"

/* transform input string by type, returned string should by freed by g_free() */
char8*	prog_string_transform( const char8 *string, const char8 *type );

EXTERN float64 prog_strtod( const char8 *nptr, char8 **endptr);

/* searches the string <str> for the first occurrence of string <sub>, return pointer to symbol after found substring */
EXTERN char8* prog_str_find_substr_end( const char8 *str, const char8 *sub );

#endif /* PROGRAM_H_ */
